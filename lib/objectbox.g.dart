// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/accounts_model.dart';
import 'data/models/ledger_model.dart';
import 'data/models/settings_model.dart';
import 'data/models/transactions_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8080568095172796682),
      name: 'AccountsModel',
      lastPropertyId: const IdUid(8, 6381893473725467657),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5407715257500835510),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8159404935287710292),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 3699993172938907636)),
        ModelProperty(
            id: const IdUid(3, 9173590315824460789),
            name: 'isActive',
            type: 1,
            flags: 8,
            indexId: const IdUid(5, 5936411796222142683)),
        ModelProperty(
            id: const IdUid(4, 1543092980557733361),
            name: 'isSystem',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2210614342965218839),
            name: 'budget',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1018012840951700402),
            name: 'createdOn',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6381893473725467657),
            name: 'ledgerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 1001218422888843300),
            relationTarget: 'LedgerModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'transactions', srcEntity: 'TransactionsModel', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 3304669295260990249),
      name: 'SettingsModel',
      lastPropertyId: const IdUid(3, 1882783179000984751),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1150648213957340989),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 757344494552936934),
            name: 'key',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 4547643216483423190)),
        ModelProperty(
            id: const IdUid(3, 1882783179000984751),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3111440568252014630),
      name: 'TransactionsModel',
      lastPropertyId: const IdUid(11, 2872802221464130534),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 517815127092567324),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 3637758887083007875),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2655138446617590267),
            name: 'txnDate',
            type: 10,
            flags: 8,
            indexId: const IdUid(3, 3335271222183504500)),
        ModelProperty(
            id: const IdUid(7, 1768783457015218408),
            name: 'createdOn',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2740250277629716057),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 3561233001629372379),
            relationTarget: 'AccountsModel'),
        ModelProperty(
            id: const IdUid(9, 824780557619384738),
            name: 'txnType',
            type: 9,
            flags: 2048,
            indexId: const IdUid(13, 7170203300489413271)),
        ModelProperty(
            id: const IdUid(10, 7294493757628710638),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2872802221464130534),
            name: 'scrollNo',
            type: 6,
            flags: 8,
            indexId: const IdUid(11, 2993461747590649745))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 6456388099575701592),
      name: 'LedgerModel',
      lastPropertyId: const IdUid(8, 7152409067748527518),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4399786035930780212),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6012842134593463925),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(7, 2628037384782407561)),
        ModelProperty(
            id: const IdUid(4, 5866889709495969676),
            name: 'isActive',
            type: 1,
            flags: 8,
            indexId: const IdUid(8, 1666913837182623160)),
        ModelProperty(
            id: const IdUid(8, 7152409067748527518),
            name: 'createdOn',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'accounts', srcEntity: 'AccountsModel', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 6456388099575701592),
      lastIndexId: const IdUid(13, 7170203300489413271),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        4327489809731861683,
        8145747128961609376,
        329040897223215847
      ],
      retiredPropertyUids: const [
        4184155973642274529,
        8785945625348729241,
        7121842560550319579,
        5065219965612753536,
        4181571944276929759,
        560121976424051924,
        7927307665217286980,
        5008846497105979365
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AccountsModel: EntityDefinition<AccountsModel>(
        model: _entities[0],
        toOneRelations: (AccountsModel object) => [object.ledger],
        toManyRelations: (AccountsModel object) => {
              RelInfo<TransactionsModel>.toOneBacklink(8, object.id,
                      (TransactionsModel srcObject) => srcObject.account):
                  object.transactions
            },
        getId: (AccountsModel object) => object.id,
        setId: (AccountsModel object, int id) {
          object.id = id;
        },
        objectToFB: (AccountsModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.isActive);
          fbb.addBool(3, object.isSystem);
          fbb.addFloat64(5, object.budget);
          fbb.addInt64(6, object.createdOn?.millisecondsSinceEpoch);
          fbb.addInt64(7, object.ledger.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdOnValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = AccountsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isActive: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              isSystem: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              budget: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14))
            ..createdOn = createdOnValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdOnValue);
          object.ledger.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.ledger.attach(store);
          InternalToManyAccess.setRelInfo(
              object.transactions,
              store,
              RelInfo<TransactionsModel>.toOneBacklink(8, object.id,
                  (TransactionsModel srcObject) => srcObject.account),
              store.box<AccountsModel>());
          return object;
        }),
    SettingsModel: EntityDefinition<SettingsModel>(
        model: _entities[1],
        toOneRelations: (SettingsModel object) => [],
        toManyRelations: (SettingsModel object) => {},
        getId: (SettingsModel object) => object.id,
        setId: (SettingsModel object, int id) {
          object.id = id;
        },
        objectToFB: (SettingsModel object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SettingsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              key: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              value: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    TransactionsModel: EntityDefinition<TransactionsModel>(
        model: _entities[2],
        toOneRelations: (TransactionsModel object) => [object.account],
        toManyRelations: (TransactionsModel object) => {},
        getId: (TransactionsModel object) => object.id,
        setId: (TransactionsModel object, int id) {
          object.id = id;
        },
        objectToFB: (TransactionsModel object, fb.Builder fbb) {
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final txnTypeOffset = fbb.writeString(object.txnType);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(5, object.txnDate?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.createdOn?.millisecondsSinceEpoch);
          fbb.addInt64(7, object.account.targetId);
          fbb.addOffset(8, txnTypeOffset);
          fbb.addFloat64(9, object.amount);
          fbb.addInt64(10, object.scrollNo);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final txnDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final createdOnValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = TransactionsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              scrollNo:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              amount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0),
              txnType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              txnDate: txnDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(txnDateValue),
              createdOn: createdOnValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdOnValue));
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.account.attach(store);
          return object;
        }),
    LedgerModel: EntityDefinition<LedgerModel>(
        model: _entities[3],
        toOneRelations: (LedgerModel object) => [],
        toManyRelations: (LedgerModel object) => {
              RelInfo<AccountsModel>.toOneBacklink(8, object.id,
                      (AccountsModel srcObject) => srcObject.ledger):
                  object.accounts
            },
        getId: (LedgerModel object) => object.id,
        setId: (LedgerModel object, int id) {
          object.id = id;
        },
        objectToFB: (LedgerModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(3, object.isActive);
          fbb.addInt64(7, object.createdOn?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdOnValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = LedgerModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isActive: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..createdOn = createdOnValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdOnValue);
          InternalToManyAccess.setRelInfo(
              object.accounts,
              store,
              RelInfo<AccountsModel>.toOneBacklink(
                  8, object.id, (AccountsModel srcObject) => srcObject.ledger),
              store.box<LedgerModel>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AccountsModel] entity fields to define ObjectBox queries.
class AccountsModel_ {
  /// see [AccountsModel.id]
  static final id =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[0]);

  /// see [AccountsModel.name]
  static final name =
      QueryStringProperty<AccountsModel>(_entities[0].properties[1]);

  /// see [AccountsModel.isActive]
  static final isActive =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[2]);

  /// see [AccountsModel.isSystem]
  static final isSystem =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[3]);

  /// see [AccountsModel.budget]
  static final budget =
      QueryDoubleProperty<AccountsModel>(_entities[0].properties[4]);

  /// see [AccountsModel.createdOn]
  static final createdOn =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[5]);

  /// see [AccountsModel.ledger]
  static final ledger = QueryRelationToOne<AccountsModel, LedgerModel>(
      _entities[0].properties[6]);
}

/// [SettingsModel] entity fields to define ObjectBox queries.
class SettingsModel_ {
  /// see [SettingsModel.id]
  static final id =
      QueryIntegerProperty<SettingsModel>(_entities[1].properties[0]);

  /// see [SettingsModel.key]
  static final key =
      QueryStringProperty<SettingsModel>(_entities[1].properties[1]);

  /// see [SettingsModel.value]
  static final value =
      QueryStringProperty<SettingsModel>(_entities[1].properties[2]);
}

/// [TransactionsModel] entity fields to define ObjectBox queries.
class TransactionsModel_ {
  /// see [TransactionsModel.id]
  static final id =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[0]);

  /// see [TransactionsModel.description]
  static final description =
      QueryStringProperty<TransactionsModel>(_entities[2].properties[1]);

  /// see [TransactionsModel.txnDate]
  static final txnDate =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[2]);

  /// see [TransactionsModel.createdOn]
  static final createdOn =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[3]);

  /// see [TransactionsModel.account]
  static final account = QueryRelationToOne<TransactionsModel, AccountsModel>(
      _entities[2].properties[4]);

  /// see [TransactionsModel.txnType]
  static final txnType =
      QueryStringProperty<TransactionsModel>(_entities[2].properties[5]);

  /// see [TransactionsModel.amount]
  static final amount =
      QueryDoubleProperty<TransactionsModel>(_entities[2].properties[6]);

  /// see [TransactionsModel.scrollNo]
  static final scrollNo =
      QueryIntegerProperty<TransactionsModel>(_entities[2].properties[7]);
}

/// [LedgerModel] entity fields to define ObjectBox queries.
class LedgerModel_ {
  /// see [LedgerModel.id]
  static final id =
      QueryIntegerProperty<LedgerModel>(_entities[3].properties[0]);

  /// see [LedgerModel.name]
  static final name =
      QueryStringProperty<LedgerModel>(_entities[3].properties[1]);

  /// see [LedgerModel.isActive]
  static final isActive =
      QueryBooleanProperty<LedgerModel>(_entities[3].properties[2]);

  /// see [LedgerModel.createdOn]
  static final createdOn =
      QueryIntegerProperty<LedgerModel>(_entities[3].properties[3]);
}
