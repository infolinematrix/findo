// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/accounts_model.dart';
import 'data/models/scroll_model.dart';
import 'data/models/settings_model.dart';
import 'data/models/transactions_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6380839005870750175),
      name: 'AccountsModel',
      lastPropertyId: const IdUid(16, 7117647135424818646),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3471956791721699720),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8875179061007825859),
            name: 'parent',
            type: 6,
            flags: 8,
            indexId: const IdUid(1, 4251148353474838538)),
        ModelProperty(
            id: const IdUid(3, 7972797603760099981),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 8100649175398019608)),
        ModelProperty(
            id: const IdUid(4, 5765012532119850623),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1873195226684707249),
            name: 'hasChild',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4174276185626757356),
            name: 'allowAlert',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6174228120374481262),
            name: 'isLocked',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8844798370990772711),
            name: 'isActive',
            type: 1,
            flags: 8,
            indexId: const IdUid(3, 8121157633723982428)),
        ModelProperty(
            id: const IdUid(9, 1295537383949181195),
            name: 'isSystem',
            type: 1,
            flags: 8,
            indexId: const IdUid(4, 2106098800532984015)),
        ModelProperty(
            id: const IdUid(10, 4497712833325228714),
            name: 'budget',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1601555869620526143),
            name: 'allowReceipt',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4225915105119863451),
            name: 'allowPayment',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4195202811051662152),
            name: 'allowTransfer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7618010993408298645),
            name: 'openingBalance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 438969234497990448),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7117647135424818646),
            name: 'createdOn',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3619846613433532969),
      name: 'ScrollModel',
      lastPropertyId: const IdUid(2, 2408095943964805879),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 474320048762413803),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2408095943964805879),
            name: 'slno',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8408837977995057107),
      name: 'SettingsModel',
      lastPropertyId: const IdUid(3, 3975466213492301190),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3148666877867569280),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5403132189135484086),
            name: 'key',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 6455462505198352390)),
        ModelProperty(
            id: const IdUid(3, 3975466213492301190),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 2021859411146122159),
      name: 'TransactionsModel',
      lastPropertyId: const IdUid(15, 1415484022925277710),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3328768438661283318),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 4008672021936518681),
            name: 'scrollNo',
            type: 6,
            flags: 8,
            indexId: const IdUid(6, 5790971733000009932)),
        ModelProperty(
            id: const IdUid(5, 3686953599943778807),
            name: 'txnType',
            type: 9,
            flags: 2048,
            indexId: const IdUid(7, 251384405369677610)),
        ModelProperty(
            id: const IdUid(6, 705780752582381333),
            name: 'txnMode',
            type: 9,
            flags: 2048,
            indexId: const IdUid(8, 3105341722183445900)),
        ModelProperty(
            id: const IdUid(7, 1978800243532927884),
            name: 'txnDate',
            type: 10,
            flags: 8,
            indexId: const IdUid(9, 7359288803536700800)),
        ModelProperty(
            id: const IdUid(8, 4126495291690323656),
            name: 'account',
            type: 6,
            flags: 8,
            indexId: const IdUid(10, 3010482349508948640)),
        ModelProperty(
            id: const IdUid(9, 4363690703241337910),
            name: 'narration',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 539624457340876105),
            name: 'createdOn',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1453011378710841305),
            name: 'accountName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5867081049909335929),
            name: 'amountDr',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5428501721021440540),
            name: 'amountCr',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4381018400706287857),
            name: 'modeAccount',
            type: 6,
            flags: 8,
            indexId: const IdUid(11, 5207053875011128922)),
        ModelProperty(
            id: const IdUid(15, 1415484022925277710),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 2021859411146122159),
      lastIndexId: const IdUid(11, 5207053875011128922),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [462709407694624262, 6991079606123816341],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AccountsModel: EntityDefinition<AccountsModel>(
        model: _entities[0],
        toOneRelations: (AccountsModel object) => [],
        toManyRelations: (AccountsModel object) => {},
        getId: (AccountsModel object) => object.id,
        setId: (AccountsModel object, int id) {
          object.id = id;
        },
        objectToFB: (AccountsModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.parent);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addBool(4, object.hasChild);
          fbb.addBool(5, object.allowAlert);
          fbb.addBool(6, object.isLocked);
          fbb.addBool(7, object.isActive);
          fbb.addBool(8, object.isSystem);
          fbb.addFloat64(9, object.budget);
          fbb.addBool(10, object.allowReceipt);
          fbb.addBool(11, object.allowPayment);
          fbb.addBool(12, object.allowTransfer);
          fbb.addFloat64(13, object.openingBalance);
          fbb.addOffset(14, descriptionOffset);
          fbb.addInt64(15, object.createdOn?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdOnValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34);
          final object = AccountsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              parent:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdOn: createdOnValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdOnValue),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              isActive: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              isSystem: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              hasChild: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              allowAlert: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              isLocked: const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false),
              budget: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 22),
              allowPayment: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26),
              allowReceipt: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24),
              allowTransfer: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28),
              openingBalance: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 30));

          return object;
        }),
    ScrollModel: EntityDefinition<ScrollModel>(
        model: _entities[1],
        toOneRelations: (ScrollModel object) => [],
        toManyRelations: (ScrollModel object) => {},
        getId: (ScrollModel object) => object.id,
        setId: (ScrollModel object, int id) {
          object.id = id;
        },
        objectToFB: (ScrollModel object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.slno);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ScrollModel(
              slno: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6))
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    SettingsModel: EntityDefinition<SettingsModel>(
        model: _entities[2],
        toOneRelations: (SettingsModel object) => [],
        toManyRelations: (SettingsModel object) => {},
        getId: (SettingsModel object) => object.id,
        setId: (SettingsModel object, int id) {
          object.id = id;
        },
        objectToFB: (SettingsModel object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SettingsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              key: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              value: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    TransactionsModel: EntityDefinition<TransactionsModel>(
        model: _entities[3],
        toOneRelations: (TransactionsModel object) => [],
        toManyRelations: (TransactionsModel object) => {},
        getId: (TransactionsModel object) => object.id,
        setId: (TransactionsModel object, int id) {
          object.id = id;
        },
        objectToFB: (TransactionsModel object, fb.Builder fbb) {
          final txnTypeOffset = fbb.writeString(object.txnType);
          final txnModeOffset = fbb.writeString(object.txnMode);
          final narrationOffset = object.narration == null
              ? null
              : fbb.writeString(object.narration!);
          final accountNameOffset = object.accountName == null
              ? null
              : fbb.writeString(object.accountName!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.scrollNo);
          fbb.addOffset(4, txnTypeOffset);
          fbb.addOffset(5, txnModeOffset);
          fbb.addInt64(6, object.txnDate?.millisecondsSinceEpoch);
          fbb.addInt64(7, object.account);
          fbb.addOffset(8, narrationOffset);
          fbb.addInt64(9, object.createdOn?.millisecondsSinceEpoch);
          fbb.addOffset(10, accountNameOffset);
          fbb.addFloat64(11, object.amountDr);
          fbb.addFloat64(12, object.amountCr);
          fbb.addInt64(13, object.modeAccount);
          fbb.addOffset(14, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final txnDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final createdOnValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = TransactionsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              account:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              accountName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              narration: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              amountDr:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0),
              amountCr:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0),
              txnMode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              modeAccount:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0),
              txnType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              scrollNo:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              txnDate: txnDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(txnDateValue),
              createdOn: createdOnValue == null ? null : DateTime.fromMillisecondsSinceEpoch(createdOnValue),
              description: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AccountsModel] entity fields to define ObjectBox queries.
class AccountsModel_ {
  /// see [AccountsModel.id]
  static final id =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[0]);

  /// see [AccountsModel.parent]
  static final parent =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[1]);

  /// see [AccountsModel.name]
  static final name =
      QueryStringProperty<AccountsModel>(_entities[0].properties[2]);

  /// see [AccountsModel.type]
  static final type =
      QueryStringProperty<AccountsModel>(_entities[0].properties[3]);

  /// see [AccountsModel.hasChild]
  static final hasChild =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[4]);

  /// see [AccountsModel.allowAlert]
  static final allowAlert =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[5]);

  /// see [AccountsModel.isLocked]
  static final isLocked =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[6]);

  /// see [AccountsModel.isActive]
  static final isActive =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[7]);

  /// see [AccountsModel.isSystem]
  static final isSystem =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[8]);

  /// see [AccountsModel.budget]
  static final budget =
      QueryDoubleProperty<AccountsModel>(_entities[0].properties[9]);

  /// see [AccountsModel.allowReceipt]
  static final allowReceipt =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[10]);

  /// see [AccountsModel.allowPayment]
  static final allowPayment =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[11]);

  /// see [AccountsModel.allowTransfer]
  static final allowTransfer =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[12]);

  /// see [AccountsModel.openingBalance]
  static final openingBalance =
      QueryDoubleProperty<AccountsModel>(_entities[0].properties[13]);

  /// see [AccountsModel.description]
  static final description =
      QueryStringProperty<AccountsModel>(_entities[0].properties[14]);

  /// see [AccountsModel.createdOn]
  static final createdOn =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[15]);
}

/// [ScrollModel] entity fields to define ObjectBox queries.
class ScrollModel_ {
  /// see [ScrollModel.id]
  static final id =
      QueryIntegerProperty<ScrollModel>(_entities[1].properties[0]);

  /// see [ScrollModel.slno]
  static final slno =
      QueryIntegerProperty<ScrollModel>(_entities[1].properties[1]);
}

/// [SettingsModel] entity fields to define ObjectBox queries.
class SettingsModel_ {
  /// see [SettingsModel.id]
  static final id =
      QueryIntegerProperty<SettingsModel>(_entities[2].properties[0]);

  /// see [SettingsModel.key]
  static final key =
      QueryStringProperty<SettingsModel>(_entities[2].properties[1]);

  /// see [SettingsModel.value]
  static final value =
      QueryStringProperty<SettingsModel>(_entities[2].properties[2]);
}

/// [TransactionsModel] entity fields to define ObjectBox queries.
class TransactionsModel_ {
  /// see [TransactionsModel.id]
  static final id =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[0]);

  /// see [TransactionsModel.scrollNo]
  static final scrollNo =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[1]);

  /// see [TransactionsModel.txnType]
  static final txnType =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[2]);

  /// see [TransactionsModel.txnMode]
  static final txnMode =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[3]);

  /// see [TransactionsModel.txnDate]
  static final txnDate =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[4]);

  /// see [TransactionsModel.account]
  static final account =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[5]);

  /// see [TransactionsModel.narration]
  static final narration =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[6]);

  /// see [TransactionsModel.createdOn]
  static final createdOn =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[7]);

  /// see [TransactionsModel.accountName]
  static final accountName =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[8]);

  /// see [TransactionsModel.amountDr]
  static final amountDr =
      QueryDoubleProperty<TransactionsModel>(_entities[3].properties[9]);

  /// see [TransactionsModel.amountCr]
  static final amountCr =
      QueryDoubleProperty<TransactionsModel>(_entities[3].properties[10]);

  /// see [TransactionsModel.modeAccount]
  static final modeAccount =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[11]);

  /// see [TransactionsModel.description]
  static final description =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[12]);
}
